// groovylint-disable CompileStatic
pipeline {
    agent {
        docker {
            image 'royrishwanth/maven-docker-git-agent:v2'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }

    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code from GitHub...'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd ultimate-pipeline/java && mvn clean package'
            }
        }
        stage('Sonar Code Analysis') {
            environment {
                SONAR_HOST_URL = 'http://13.221.235.91:9000'
            }
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh 'cd ultimate-pipeline/java && mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }
        stage('Build and Push Docker Image') {
                environment {
                    REGISTRY_CREDENTIALS = credentials('docker-cred')
                }
                steps {
  /*                  script {
                        def dockerImageTag = "royrishwanth/java-ci-cd-app:${BUILD_NUMBER}"
                        echo "Build number is: ${BUILD_NUMBER}"
                        echo "Docker image to be built and pushed: ${dockerImageTag}"
                        dir('ultimate-pipeline') {
                            sh "docker build -t ${dockerImageTag} ."
                        }
                        echo 'Pushing Docker image to Docker Hub...'
                        def dockerImage = docker.image(dockerImageTag)
                        docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
                            dockerImage.push() }
                    }
                }
            }
*/
                    script {
                        def dockerImageTag = "royrishwanth/java-ci-cd-app:${BUILD_NUMBER}"
                        echo "Docker image tag: ${dockerImageTag}"

                        dir('ultimate-pipeline') {
                            sh "docker build -t ${dockerImageTag} ."
                        }

                        echo 'Logging into Docker Hub...'
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"

                        echo 'Pushing Docker image via shell...'
                        sh "docker push ${dockerImageTag}"
                    }
                }
        }
        stage('Update Deplyment File')
        {
            environment {
                GIT_REPO_NAME = 'Jenkins-cicd'
                GIT_USER_NAME = 'royrishwanth'
            }
            steps {
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "royrishwanth@gmail.com"
                        git config user.name "Rishwanth Kothapalli"
                        BUILD_NUMBER=\${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/\${BUILD_NUMBER}/g" k8-manifests/deployment.yml
                        git add k8-manifests/deployment.yml
                        git commit -m "Updated deployment file with build number \${BUILD_NUMBER}"
                        git push https://\${GITHUB_TOKEN}@github.com/\${GIT_USER_NAME}/\${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
